/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
var canvas = document.createElement('canvas');
var ctx = canvas.getContext("2d");
document.body.appendChild(canvas);
var grid = [];
var grid_size = 20;
var fps = 5;
var width = Math.floor(window.innerWidth / grid_size) * grid_size;
var height = Math.floor(window.innerHeight / grid_size) * grid_size;
canvas.width = width;
canvas.height = height;
function reset() {
    grid = [];
    for (var x = 0; x < width / grid_size; x++) {
        var temp_array = [];
        for (var y = 0; y < height / grid_size; y++) {
            temp_array.push(false);
        }
        grid.push(temp_array);
    }
}
reset();
function drawSquare(x, y, s, state) {
    if (state === void 0) { state = false; }
    ctx.fillStyle = state ? "white" : "black";
    ctx.fillRect(x, y, s, s);
}
function glider(x, y) {
    grid[x][y] = false;
    grid[x + 1][y] = false;
    grid[x + 2][y] = true;
    grid[x][y + 1] = true;
    grid[x + 1][y + 1] = false;
    grid[x + 2][y + 1] = true;
    grid[x][y + 2] = false;
    grid[x + 1][y + 2] = true;
    grid[x + 2][y + 2] = true;
}
glider(0, 0);
glider(5, 5);
glider(10, 5);
glider(10, 10);
grid[21][20] = true;
grid[22][20] = true;
grid[23][20] = true;
function updateGol(oldgrid) {
    var newgrid = [];
    var gh = oldgrid[0].length;
    var gw = oldgrid.length;
    for (var x = 0; x < gw; x++) {
        var temp_array = [];
        for (var y = 0; y < gh; y++) {
            var total = 0;
            // check the number of neighboring cells
            for (var i = -1; i <= 1; i++) {
                for (var j = -1; j <= 1; j++) {
                    if ((i !== 0 || j !== 0) && oldgrid[(x + i + gw) % gw][(y + j + gh) % gh]) {
                        total++;
                    }
                }
            }
            if (oldgrid[x][y] && (total == 2 || total == 3)) {
                temp_array.push(true);
            }
            else if (!oldgrid[x][y] && (total == 3)) {
                temp_array.push(true);
            }
            else {
                temp_array.push(false);
            }
        }
        newgrid.push(temp_array);
    }
    return newgrid;
}
function render(rendergrid) {
    if (rendergrid === void 0) { rendergrid = grid; }
    console.log(rendergrid.length);
    for (var x = 0; x < width / grid_size; x++) {
        for (var y = 0; y < height / grid_size; y++) {
            drawSquare(x * grid_size, y * grid_size, grid_size, rendergrid[x][y]);
        }
    }
}
function step() {
    grid = updateGol(grid);
    console.log(grid);
    render(grid);
}
var enabled = true;
setInterval(function () {
    if (enabled)
        step();
}, 1000 / fps);
addEventListener("keypress", function (ev) {
    switch (ev.key) {
        case "s":
            if (!enabled) {
                step();
            }
            break;
        case "t":
        case " ":
            enabled = !enabled;
            break;
        case "r":
            reset();
            glider(5, 5);
            break;
    }
});
step();


/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,